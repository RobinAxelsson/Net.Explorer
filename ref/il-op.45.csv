Category,Opcode,Description,Stack Behavior,Example
Constants and Loads,ldc.i4,Pushes a 4-byte integer constant onto the stack,Push,ldc.i4 42 // Push 42
Constants and Loads,ldc.i4.s,Pushes a short 4-byte integer (optimized),Push,ldc.i4.s 10 // Push 10
Constants and Loads,ldc.i4.m1,Pushes -1 onto the stack,Push,ldc.i4.m1 // Push -1
Constants and Loads,ldc.i4.0,Pushes 0 onto the stack,Push,ldc.i4.0 // Push 0
Constants and Loads,ldc.i4.1,Pushes 1 onto the stack,Push,ldc.i4.1 // Push 1
Constants and Loads,ldc.i4.2,Pushes 2 onto the stack,Push,ldc.i4.2 // Push 2
Constants and Loads,ldc.i4.3,Pushes 3 onto the stack,Push,ldc.i4.3 // Push 3
Constants and Loads,ldc.i4.4,Pushes 4 onto the stack,Push,ldc.i4.4 // Push 4
Constants and Loads,ldc.i4.5,Pushes 5 onto the stack,Push,ldc.i4.5 // Push 5
Constants and Loads,ldc.i4.6,Pushes 6 onto the stack,Push,ldc.i4.6 // Push 6
Constants and Loads,ldc.i4.7,Pushes 7 onto the stack,Push,ldc.i4.7 // Push 7
Constants and Loads,ldc.i4.8,Pushes 8 onto the stack,Push,ldc.i4.8 // Push 8
Constants and Loads,ldc.i8,Pushes an 8-byte integer constant onto the stack,Push,ldc.i8 10000000000 // Push 10 billion
Constants and Loads,ldc.r4,Pushes a 4-byte floating-point constant onto the stack,Push,ldc.r4 3.14 // Push 3.14
Constants and Loads,ldc.r8,Pushes an 8-byte floating-point constant onto the stack,Push,ldc.r8 2.718 // Push 2.718
Constants and Loads,ldstr,Pushes a string constant onto the stack,Push,ldstr "Hello" // Push "Hello"
Constants and Loads,ldnull,Pushes a null reference onto the stack,Push,ldnull // Push null
Constants and Loads,ldloc,Loads a local variable onto the stack,Push,ldloc 0 // Load local variable at index 0
Constants and Loads,ldloca,Loads the address of a local variable,Push,ldloca 1 // Load address of local 1
Constants and Loads,ldarg,Loads an argument onto the stack,Push,ldarg 0 // Load first argument
Constants and Loads,ldarga,Loads the address of an argument,Push,ldarga 1 // Load address of second argument
Stores,stloc,Stores the top value from the stack into a local variable,Pop,stloc 0 // Store top stack value to local 0
Stores,starg,Stores the top value from the stack into an argument,Pop,starg 1 // Store top value to argument 1
Stores,stfld,Stores a value into a field,Pop x 2,stfld int32 MyClass::MyField // Store into field
Stores,stsfld,Stores a value into a static field,Pop,stsfld int32 MyClass::MyStaticField
Arithmetic Operations,add,Adds two values,Pop x 2, Push,ldc.i4.3 \n ldc.i4.4 \n add // Push 7
Arithmetic Operations,sub,Subtracts one value from another,Pop x 2, Push,ldc.i4.7 \n ldc.i4.3 \n sub // Push 4
Arithmetic Operations,mul,Multiplies two values,Pop x 2, Push,ldc.i4.2 \n ldc.i4.5 \n mul // Push 10
Arithmetic Operations,div,Divides one value by another,Pop x 2, Push,ldc.i4.10 \n ldc.i4.2 \n div // Push 5
Arithmetic Operations,rem,Computes the remainder,Pop x 2, Push,ldc.i4.10 \n ldc.i4.3 \n rem // Push 1
Arithmetic Operations,neg,Negates a value,Pop, Push,ldc.i4.5 \n neg // Push -5
Arithmetic Operations,and,Computes bitwise AND,Pop x 2, Push,ldc.i4 6 \n ldc.i4 3 \n and // Push 2
Arithmetic Operations,or,Computes bitwise OR,Pop x 2, Push,ldc.i4 6 \n ldc.i4 3 \n or // Push 7
Control Flow,br,Unconditional branch,None,br IL_0010 // Jump to label
Control Flow,brtrue,Branch if non-zero,Pop,ldc.i4.1 \n brtrue IL_0020
Control Flow,brfalse,Branch if zero,Pop,ldc.i4.0 \n brfalse IL_0030
Control Flow,beq,Branch if equal,Pop x 2,ldc.i4.3 \n ldc.i4.3 \n beq IL_0040
Method Calls,call,Calls a method,Varies,call instance void MyClass::MyMethod()
Method Calls,callvirt,Calls a virtual method,Varies,callvirt instance void MyClass::MyVirtualMethod()
Method Calls,ret,Returns from method,Pop,ret
Object Operations,newobj,Creates a new object,Push,newobj instance void MyClass::.ctor()
Object Operations,ldfld,Loads the value of a field,Pop, Push,ldfld int32 MyClass::MyField
Object Operations,ldsfld,Loads the value of a static field,Push,ldsfld int32 MyClass::MyStaticField
